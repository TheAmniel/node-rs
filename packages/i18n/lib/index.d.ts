/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Represents the configuration for internationalization (i18n). */
export interface I18nConfig {
  /**
   * The directory where locale files are stored.
   * @type {string} directory
   */
  directory: string
  /**
   * A list of supported locales.
   * @type {string[]} locales
   */
  locales: Array<string>
  /**
   * The fallback locale to use when a translation is not found.
   * @type {string} [fallback]
   */
  fallback?: string
  /**
   * The default locale to use when no locale is specified.
   * @type {string} [default]
   */
  default?: string
  /**
   * Whether to preload all locale files or not.
   * @type {boolean} [preload]
   */
  preload?: boolean
}
export function upa(filePath: string): string
/** Manages languages and store in cache */
export class I18n {
  /**
   * @type {string} fallback use if current locale fail
   * @readonly
   */
  readonly fallback: string
  /**
   * @type {string} locale is the current language
   * @readonly
   */
  readonly locale: string
  /**
   * @type {string} directory relative or absolute where locales are located.
   * @readonly
   */
  readonly directory: string
  /**
   * @type {string[]} locales - A list of available locales, if specified.
   * @readonly
   */
  readonly locales: Array<string>
  /**
   * Create a new Languages class from the config provide
   * @param {I18nConfig} options - Options for class I18n
   *
   * Example:
   * ```js
   * const i18n = new I18n({
   *   directory: './locales',
   *   fallback: 'en-US',
   *   default: 'fr-FR',
   *   locales: ['fr-FR', 'en-US', 'es-ES'],
   *   preload: true,
   * });
   * ```
   */
  constructor(options: I18nConfig)
}
